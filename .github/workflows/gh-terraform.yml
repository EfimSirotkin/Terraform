name: 'gcloud'

on:
  push:
    branches:
    - ci
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  gcloud:
    name: 'Provision GCP'
    runs-on: ubuntu-latest
    environment: production
    env:
      REGION : 'europe-west2'
      PROJECT : 'alconost-sandbox'
      REPO : 'nginx'
      IMAGE : 'nginx'
      TAG : 'v1'
      SERVICE_NAME: alconost-cloudrun
      DB_INSTANCE_NAME: alconost-db-instance-${{ github.sha }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - name: 'Set up gcloud cli'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'
   
    - name: 'Creating CloudRun service'
      id: cloudrun
      env:
        IMAGE_URL: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT }}/${{ env.REPO }}/${{ env.IMAGE }}:${{ env.TAG }}
        PORT: 80
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} --image=${{ env.IMAGE_URL }} --port=${{ env.PORT }} --region=${{ env.REGION }} --allow-unauthenticated

    - name: 'Creating CloudSQL DB instance'
      env:
        DB_TYPE: MYSQL_8_0
        DB_TIER: db-f1-micro
        ROOT_PASS: ${{ secrets.GCP_DB_ROOT_PASSWORD }}
      run: |
        gcloud sql instances create ${{ env.DB_INSTANCE_NAME }} --database-version=${{ env.DB_TYPE }} --tier=${{ env.DB_TIER }} --region=${{ env.REGION }} --root-password=${{ env.ROOT_PASS }} --async
      
    - name: 'Getting CloudRun service URL'
      if: steps.cloudrun.outcome == 'success'
      run: |
        echo SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)') >> $GITHUB_ENV
        
    - name: 'Performing tests'
      run: |
        echo "Perform some auto-tests"
        echo "Service URL: ${{ env.SERVICE_URL }}"
        sleep 20s
      shell: bash

    - name: 'Deleting CloudRun'
      if: always()
      run: |
        gcloud run services delete ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --quiet

    - name: 'Deleting CloudSQL'
      if: always()
      run: |
        gcloud sql instances delete ${{ env.DB_INSTANCE_NAME }} --async --quiet
